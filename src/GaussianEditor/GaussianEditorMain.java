/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GaussianEditor;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.*;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author j2h2m
 */
public class GaussianEditorMain extends javax.swing.JFrame implements DropTargetListener {

    /**
     * Creates new form TxtMain
     */
    public GaussianEditorMain() {
        initComponents();
        DropTarget target = new DropTarget(lblInstruction, DnDConstants.ACTION_COPY_OR_MOVE, (DropTargetListener) this, true, null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaInputPreview = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        lblInstruction = new javax.swing.JLabel();
        LabelTargetFile = new javax.swing.JLabel();
        txtXYZFilePath = new javax.swing.JTextField();
        LabelTargetFile9 = new javax.swing.JLabel();
        txtChkFilePath = new javax.swing.JTextField();
        chkCopycheckpoint = new javax.swing.JCheckBox();
        btnClear = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        LabelTargetFile1 = new javax.swing.JLabel();
        txtChkName = new javax.swing.JTextField();
        LabelTargetFile8 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        btnRefresh = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        LabelTargetFile10 = new javax.swing.JLabel();
        txtSolvModel = new javax.swing.JTextField();
        txtSolvent = new javax.swing.JTextField();
        LabelTargetFile12 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        txtScanParam = new javax.swing.JTextField();
        LabelTargetFile11 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        btnSaveAs = new javax.swing.JButton();
        LabelTargetFile13 = new javax.swing.JLabel();
        txtSavePath = new javax.swing.JTextField();
        chkCurrentFolder = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        LabelTargetFile3 = new javax.swing.JLabel();
        txtFunctional = new javax.swing.JTextField();
        LabelTargetFile6 = new javax.swing.JLabel();
        txtBasisMain = new javax.swing.JTextField();
        LabelTargetFile7 = new javax.swing.JLabel();
        txtBasisSub = new javax.swing.JTextField();
        chkFixBasis = new javax.swing.JCheckBox();
        chkDispersion = new javax.swing.JCheckBox();
        chkUnrestricted = new javax.swing.JCheckBox();
        chkCheckpoint = new javax.swing.JCheckBox();
        txtCharge = new javax.swing.JTextField();
        LabelTargetFile14 = new javax.swing.JLabel();
        LabelTargetFile15 = new javax.swing.JLabel();
        txtMultiplicity = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        LabelTargetFile17 = new javax.swing.JLabel();
        comboboxCalcType = new javax.swing.JComboBox<>();
        LabelTargetFile18 = new javax.swing.JLabel();
        txtNumProc = new javax.swing.JTextField();
        LabelTargetFile19 = new javax.swing.JLabel();
        txtMemory = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        LabelTargetFile4 = new javax.swing.JLabel();
        txtAdditionalKeys = new javax.swing.JTextField();
        chkFixAdditionalKeys = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Text changer");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        txtAreaInputPreview.setColumns(20);
        txtAreaInputPreview.setRows(5);
        jScrollPane2.setViewportView(txtAreaInputPreview);

        jPanel1.setBackground(new java.awt.Color(210, 210, 210));

        lblInstruction.setBackground(new java.awt.Color(153, 153, 153));
        lblInstruction.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInstruction.setText("Drag files(xyz, chk) or folder here.");
        lblInstruction.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        LabelTargetFile.setText("xyz File Path:");

        txtXYZFilePath.setEditable(false);

        LabelTargetFile9.setText("chk File Path:");

        txtChkFilePath.setEditable(false);

        chkCopycheckpoint.setText("Copy checkpoint?");
        chkCopycheckpoint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkCopycheckpointMouseClicked(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInstruction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(LabelTargetFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtXYZFilePath))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(LabelTargetFile9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtChkFilePath)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chkCopycheckpoint, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTargetFile)
                    .addComponent(txtXYZFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTargetFile9)
                    .addComponent(txtChkFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkCopycheckpoint))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(210, 210, 210));

        LabelTargetFile1.setText("Job Name:");

        txtChkName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtChkNameKeyPressed(evt);
            }
        });

        LabelTargetFile8.setText("Checkpoint name:");

        txtTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTitleKeyPressed(evt);
            }
        });

        btnRefresh.setText("Refresh Preview");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelTargetFile1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelTargetFile8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtChkName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtChkName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelTargetFile8)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelTargetFile1)
                    .addComponent(btnRefresh))
                .addGap(33, 33, 33))
        );

        jPanel4.setBackground(new java.awt.Color(210, 210, 210));

        LabelTargetFile10.setText("Solvation model:");

        txtSolvModel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSolvModel.setText("SMD");
        txtSolvModel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSolvModelKeyPressed(evt);
            }
        });

        txtSolvent.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSolvent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSolventKeyPressed(evt);
            }
        });

        LabelTargetFile12.setText("Solvent:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(LabelTargetFile10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSolvModel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelTargetFile12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSolvent)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTargetFile10)
                    .addComponent(txtSolvModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSolvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelTargetFile12))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(210, 210, 210));

        txtScanParam.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtScanParam.setText("B [A1] [A2] S [#] [change]");
        txtScanParam.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtScanParamKeyPressed(evt);
            }
        });

        LabelTargetFile11.setText("Scan:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelTargetFile11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtScanParam)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTargetFile11)
                    .addComponent(txtScanParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel8.setBackground(new java.awt.Color(210, 210, 210));

        btnSaveAs.setText("Save");
        btnSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsActionPerformed(evt);
            }
        });

        LabelTargetFile13.setText("Save Path:");

        chkCurrentFolder.setText("Current folder");
        chkCurrentFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkCurrentFolderMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelTargetFile13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSavePath, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkCurrentFolder, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSaveAs, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveAs)
                    .addComponent(LabelTargetFile13)
                    .addComponent(txtSavePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkCurrentFolder))
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(210, 210, 210));

        jPanel3.setBackground(new java.awt.Color(210, 210, 210));

        LabelTargetFile3.setText("Functional:");

        txtFunctional.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFunctional.setText("B3LYP");
        txtFunctional.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFunctionalKeyPressed(evt);
            }
        });

        LabelTargetFile6.setText("Basis Set (Main):");

        txtBasisMain.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBasisMain.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBasisMainKeyPressed(evt);
            }
        });

        LabelTargetFile7.setText("Basis Set (Sub,ECP):");

        txtBasisSub.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBasisSub.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBasisSubKeyPressed(evt);
            }
        });

        chkFixBasis.setText("fix");
        chkFixBasis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkFixBasisMouseClicked(evt);
            }
        });

        chkDispersion.setSelected(true);
        chkDispersion.setText("D3 Dispersion?");
        chkDispersion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkDispersionMouseClicked(evt);
            }
        });

        chkUnrestricted.setSelected(true);
        chkUnrestricted.setText("Unrestricted?");
        chkUnrestricted.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkUnrestrictedMouseClicked(evt);
            }
        });

        chkCheckpoint.setSelected(true);
        chkCheckpoint.setText("Checkpoint?");
        chkCheckpoint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkCheckpointMouseClicked(evt);
            }
        });

        txtCharge.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCharge.setText("0");
        txtCharge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtChargeKeyPressed(evt);
            }
        });

        LabelTargetFile14.setText("Charge:");

        LabelTargetFile15.setText("Multiplicity:");

        txtMultiplicity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtMultiplicity.setText("1");
        txtMultiplicity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMultiplicityKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(LabelTargetFile3)
                        .addGap(3, 3, 3)
                        .addComponent(txtFunctional)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelTargetFile6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBasisMain, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelTargetFile7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBasisSub, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkFixBasis, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(chkDispersion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkUnrestricted, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkCheckpoint, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LabelTargetFile14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCharge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelTargetFile15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMultiplicity)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTargetFile3)
                    .addComponent(txtFunctional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelTargetFile6)
                    .addComponent(txtBasisMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelTargetFile7)
                    .addComponent(txtBasisSub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkFixBasis))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMultiplicity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkDispersion)
                    .addComponent(chkUnrestricted)
                    .addComponent(chkCheckpoint)
                    .addComponent(LabelTargetFile14)
                    .addComponent(txtCharge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelTargetFile15, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(210, 210, 210));

        LabelTargetFile17.setText("Calculation:");

        comboboxCalcType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Opt+Freq", "TS+Freq", "SP Solv", "IRC", "Scan", "Opt", "TS", "Freq", "SP" }));
        comboboxCalcType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxCalcTypeActionPerformed(evt);
            }
        });

        LabelTargetFile18.setText("Number of Processors:");

        txtNumProc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNumProc.setText("8");
        txtNumProc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNumProcKeyPressed(evt);
            }
        });

        LabelTargetFile19.setText("Memory");

        txtMemory.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtMemory.setText("8gb");
        txtMemory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMemoryKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelTargetFile17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboboxCalcType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelTargetFile18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtNumProc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelTargetFile19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMemory)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboboxCalcType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelTargetFile17)
                    .addComponent(LabelTargetFile18)
                    .addComponent(txtNumProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelTargetFile19)
                    .addComponent(txtMemory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel9.setBackground(new java.awt.Color(210, 210, 210));

        jPanel10.setBackground(new java.awt.Color(210, 210, 210));

        LabelTargetFile4.setText("Additional keywords:");

        txtAdditionalKeys.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAdditionalKeys.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAdditionalKeysKeyPressed(evt);
            }
        });

        chkFixAdditionalKeys.setText("fix");
        chkFixAdditionalKeys.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkFixAdditionalKeysMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelTargetFile4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAdditionalKeys)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkFixAdditionalKeys, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTargetFile4)
                    .addComponent(txtAdditionalKeys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkFixAdditionalKeys))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsActionPerformed
        // TODO add your handling code here:
        String SavePath = txtSavePath.getText();
        if (!SavePath.equals("")) {
            try {
                File input_file = new File(SavePath);
                if (input_file.exists()) {
                    int a = JOptionPane.showConfirmDialog(null, "Do you want to overwrite file?");
                    if (a == 0) {
                        save_input(input_file);
                    }
                }else{
                    File parent_dir = new File(input_file.getParent());
                    if(parent_dir.exists()){
                        save_input(input_file);
                    }else{
                        parent_dir.mkdirs();
                        save_input(input_file);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(GaussianEditorMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveAsActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        refresh_input();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void txtTitleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTitleKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            refresh_input();
        }
    }//GEN-LAST:event_txtTitleKeyPressed

    private void txtChkNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtChkNameKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            refresh_input();
        }
    }//GEN-LAST:event_txtChkNameKeyPressed

    private void txtFunctionalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFunctionalKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            refresh_input();
        }
    }//GEN-LAST:event_txtFunctionalKeyPressed

    private void txtBasisMainKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBasisMainKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            refresh_input();
        }
    }//GEN-LAST:event_txtBasisMainKeyPressed

    private void txtBasisSubKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBasisSubKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            refresh_input();
        }
    }//GEN-LAST:event_txtBasisSubKeyPressed

    private void txtChargeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtChargeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            refresh_input();
        }
    }//GEN-LAST:event_txtChargeKeyPressed

    private void txtMultiplicityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMultiplicityKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            refresh_input();
        }
    }//GEN-LAST:event_txtMultiplicityKeyPressed

    private void txtSolvModelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSolvModelKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            refresh_input();
        }
    }//GEN-LAST:event_txtSolvModelKeyPressed

    private void txtSolventKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSolventKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            refresh_input();
        }
    }//GEN-LAST:event_txtSolventKeyPressed

    private void txtScanParamKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtScanParamKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            refresh_input();
        }
    }//GEN-LAST:event_txtScanParamKeyPressed

    private void chkCopycheckpointMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkCopycheckpointMouseClicked
        // TODO add your handling code here:
        refresh_input();
    }//GEN-LAST:event_chkCopycheckpointMouseClicked

    private void chkDispersionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkDispersionMouseClicked
        // TODO add your handling code here:
        refresh_input();
    }//GEN-LAST:event_chkDispersionMouseClicked

    private void chkUnrestrictedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkUnrestrictedMouseClicked
        // TODO add your handling code here:
        refresh_input();
    }//GEN-LAST:event_chkUnrestrictedMouseClicked

    private void chkCheckpointMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkCheckpointMouseClicked
        // TODO add your handling code here:
        refresh_input();
    }//GEN-LAST:event_chkCheckpointMouseClicked

    private void chkCurrentFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkCurrentFolderMouseClicked
        // TODO add your handling code here:
        refresh_input();
    }//GEN-LAST:event_chkCurrentFolderMouseClicked

    private void chkFixBasisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkFixBasisMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_chkFixBasisMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtXYZFilePath.setText("");
        txtChkFilePath.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void comboboxCalcTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxCalcTypeActionPerformed
        // TODO add your handling code here:
        refresh_input();
    }//GEN-LAST:event_comboboxCalcTypeActionPerformed

    private void txtNumProcKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumProcKeyPressed
        // TODO add your handling code here:
        refresh_input();
    }//GEN-LAST:event_txtNumProcKeyPressed

    private void txtMemoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMemoryKeyPressed
        // TODO add your handling code here:
        refresh_input();
    }//GEN-LAST:event_txtMemoryKeyPressed

    private void chkFixAdditionalKeysMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkFixAdditionalKeysMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_chkFixAdditionalKeysMouseClicked

    private void txtAdditionalKeysKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAdditionalKeysKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAdditionalKeysKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GaussianEditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GaussianEditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GaussianEditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GaussianEditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GaussianEditorMain().setVisible(true);
                refresh_input();
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelTargetFile;
    private javax.swing.JLabel LabelTargetFile1;
    private javax.swing.JLabel LabelTargetFile10;
    private javax.swing.JLabel LabelTargetFile11;
    private javax.swing.JLabel LabelTargetFile12;
    private javax.swing.JLabel LabelTargetFile13;
    private javax.swing.JLabel LabelTargetFile14;
    private javax.swing.JLabel LabelTargetFile15;
    private javax.swing.JLabel LabelTargetFile17;
    private javax.swing.JLabel LabelTargetFile18;
    private javax.swing.JLabel LabelTargetFile19;
    private javax.swing.JLabel LabelTargetFile3;
    private javax.swing.JLabel LabelTargetFile4;
    private javax.swing.JLabel LabelTargetFile6;
    private javax.swing.JLabel LabelTargetFile7;
    private javax.swing.JLabel LabelTargetFile8;
    private javax.swing.JLabel LabelTargetFile9;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSaveAs;
    private static javax.swing.JCheckBox chkCheckpoint;
    private static javax.swing.JCheckBox chkCopycheckpoint;
    private static javax.swing.JCheckBox chkCurrentFolder;
    private static javax.swing.JCheckBox chkDispersion;
    private javax.swing.JCheckBox chkFixAdditionalKeys;
    private static javax.swing.JCheckBox chkFixBasis;
    private static javax.swing.JCheckBox chkUnrestricted;
    private static javax.swing.JComboBox<String> comboboxCalcType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JLabel lblInstruction;
    private javax.swing.JTextField txtAdditionalKeys;
    private static javax.swing.JTextArea txtAreaInputPreview;
    private static javax.swing.JTextField txtBasisMain;
    private static javax.swing.JTextField txtBasisSub;
    private static javax.swing.JTextField txtCharge;
    private static javax.swing.JTextField txtChkFilePath;
    private static javax.swing.JTextField txtChkName;
    private static javax.swing.JTextField txtFunctional;
    private static javax.swing.JTextField txtMemory;
    private static javax.swing.JTextField txtMultiplicity;
    private static javax.swing.JTextField txtNumProc;
    private static javax.swing.JTextField txtSavePath;
    private static javax.swing.JTextField txtScanParam;
    private static javax.swing.JTextField txtSolvModel;
    private static javax.swing.JTextField txtSolvent;
    private static javax.swing.JTextField txtTitle;
    private static javax.swing.JTextField txtXYZFilePath;
    // End of variables declaration//GEN-END:variables

    public void dragEnter(DropTargetDragEvent dtde) {
        //System.out.println("dragEnter");
    }

    public void dragExit(DropTargetEvent dtde) {
        //System.out.println("dragExit");
    }

    public void dragOver(DropTargetDragEvent dtde) {
        //System.out.println("dragOver");
    }

    public void drop(DropTargetDropEvent dtde) {
        //System.out.println("drop");
        //액션이 copy or move인 경우에 읽어들인다.
        if ((dtde.getDropAction()
                & DnDConstants.ACTION_COPY_OR_MOVE) != 0) {
            dtde.acceptDrop(dtde.getDropAction());
            Transferable tr = dtde.getTransferable();
            try {
                //전달되는 파일을 리스트형태로 변환
                //파일리스트의 DataFlavor를 이용하여 tr에 저장
                java.util.List list = (java.util.List) tr.getTransferData(DataFlavor.javaFileListFlavor);
                //리스트의 첫번째 원소를 파일로 읽어들인다.
                File dragged_file = (File) list.get(0);

                if (dragged_file.isDirectory()) {
                    //JOptionPane.showMessageDialog(null, "Please drag a file.");
                    txtXYZFilePath.setText("");
                    txtChkFilePath.setText("");
                    File[] filelist = dragged_file.listFiles();
                    for (File file : filelist) {
                        String ext = file.getName().split("\\.")[1];
                        if (ext.equals("xyz")) {
                            txtXYZFilePath.setText(file.getPath());
                            txtTitle.setText(file.getName().split("\\.")[0]);
                            txtChkName.setText(file.getName().split("\\.")[0]);
                            refresh_input();
                        } else if (ext.equals("chk")) {
                            txtChkFilePath.setText(file.getPath());
                            txtTitle.setText(file.getName().split("\\.")[0]);
                            txtChkName.setText(file.getName().split("\\.")[0]);
                            refresh_input();
                        }
                    }
                } else {
                    // 특정 파일을 이동시
                    String ext = dragged_file.getName().split("\\.")[1];
                    if (ext.equals("xyz")) {
                        txtXYZFilePath.setText(dragged_file.getPath());
                        txtTitle.setText(dragged_file.getName().split("\\.")[0]);
                        txtChkName.setText(dragged_file.getName().split("\\.")[0]);
                        refresh_input();
                    } else if (ext.equals("chk")) {
                        txtChkFilePath.setText(dragged_file.getPath());
                        txtTitle.setText(dragged_file.getName().split("\\.")[0]);
                        txtChkName.setText(dragged_file.getName().split("\\.")[0]);
                        refresh_input();
                    } else {
                        JOptionPane.showMessageDialog(null, "Please drag an .xyz or .chk file.");
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void dropActionChanged(DropTargetDragEvent dtde) {
        //System.out.println("dropActionChanged");
    }

    public static void refresh_input() {
        //General Setting        
        txtAreaInputPreview.setText("");
        txtAreaInputPreview.append("%nproc=" + txtNumProc.getText()+"\n");
        txtAreaInputPreview.append("%mem=" + txtMemory.getText()+"\n");
        if(chkCheckpoint.isSelected()){
            txtAreaInputPreview.append("%chk=" + txtChkName.getText()+"\n");
        }
        //Calc Type Setting
        txtAreaInputPreview.append("#p\n");

        if (comboboxCalcType.getSelectedItem().equals("Opt+Freq")) {
            txtAreaInputPreview.append("opt\n");
            txtAreaInputPreview.append("freq=noraman\n");
            if (!chkFixBasis.isSelected()) {
                txtBasisMain.setText("6-31G**");
                txtBasisSub.setText("LANL2DZ");
            }
        } else if (comboboxCalcType.getSelectedItem().equals("TS+Freq")) {
            txtAreaInputPreview.append("opt=(ts, calcfc, noeigen)\n");
            txtAreaInputPreview.append("freq=noraman\n");
            if (!chkFixBasis.isSelected()) {
                txtBasisMain.setText("6-31G**");
                txtBasisSub.setText("LANL2DZ");
            }
        } else if (comboboxCalcType.getSelectedItem().equals("SP Solv")) {
            if (txtSolvent.getText().matches("[-+]?[0-9]*\\.?[0-9]+")) {
                txtAreaInputPreview.append("scrf=(" + txtSolvModel.getText() + ", read)\n");
            } else {
                txtAreaInputPreview.append("scrf=(" + txtSolvModel.getText() + ", solvent=" + txtSolvent.getText() + ")\n");
            }
            txtAreaInputPreview.append("pop=(nbo,full)\n");
            if (!chkFixBasis.isSelected()) {
                txtBasisMain.setText("6-311+G**");
                txtBasisSub.setText("SDD");
            }
        } else if (comboboxCalcType.getSelectedItem().equals("IRC")) {
            txtAreaInputPreview.append("irc= (rcfc, LQA, maxpoints=40)\n");
            if (!chkFixBasis.isSelected()) {
                txtBasisMain.setText("6-31G**");
                txtBasisSub.setText("LANL2DZ");
            }
        } else if (comboboxCalcType.getSelectedItem().equals("Scan")) {
            txtAreaInputPreview.append("opt=modredundant\n");
            if (!chkFixBasis.isSelected()) {
                txtBasisMain.setText("6-31G**");
                txtBasisSub.setText("LANL2DZ");
            }
        } else if (comboboxCalcType.getSelectedItem().equals("Opt")) {
            txtAreaInputPreview.append("opt\n");
            if (!chkFixBasis.isSelected()) {
                txtBasisMain.setText("6-31G**");
                txtBasisSub.setText("LANL2DZ");
            }
        } else if (comboboxCalcType.getSelectedItem().equals("TS")) {
            txtAreaInputPreview.append("opt=(ts, calcfc, noeigen)\n");
            if (!chkFixBasis.isSelected()) {
                txtBasisMain.setText("6-31G**");
                txtBasisSub.setText("LANL2DZ");
            }
        } else if (comboboxCalcType.getSelectedItem().equals("Freq")) {
            txtAreaInputPreview.append("freq=noraman\n");
            if (!chkFixBasis.isSelected()) {
                txtBasisMain.setText("6-31G**");
                txtBasisSub.setText("LANL2DZ");
            }
        } else if (comboboxCalcType.getSelectedItem().equals("SP")) {
            txtAreaInputPreview.append("pop=(nbo,full)\n");
            if (!chkFixBasis.isSelected()) {
                txtBasisMain.setText("6-311+G**");
                txtBasisSub.setText("SDD");
            }
        }
        //Functional basis set
        if(chkUnrestricted.isSelected()){
            txtAreaInputPreview.append("u");
        }
        txtAreaInputPreview.append(txtFunctional.getText()+"/gen\n");
        if (chkDispersion.isSelected()) {
            txtAreaInputPreview.append("EmpiricalDispersion=GD3\n");
        }
        
        
        ArrayList<String> AllAtoms = new ArrayList<String>();
        ArrayList<ArrayList<String>> atoms_classified = new ArrayList<ArrayList<String>>();
        
        //ecp check
        if (!txtXYZFilePath.getText().equals("")) {
            AllAtoms = get_atoms(txtXYZFilePath.getText());
            try {
                atoms_classified = classify_atoms(AllAtoms);
            } catch (IOException ex) {
                Logger.getLogger(GaussianEditorMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            ArrayList<String> atoms_ecp = (atoms_classified.get(1));
            if (atoms_ecp.size() > 0) {
                txtAreaInputPreview.append("pseudo=read\n");
            }

        }

        //guess=read, geom=check
        if(chkCopycheckpoint.isSelected()){
            txtAreaInputPreview.append("guess=read\n");
            txtAreaInputPreview.append("geom=check\n");
        }
                
        //Other general input setting
        txtAreaInputPreview.append("nosym\n");
        txtAreaInputPreview.append("int=ultrafine\n");

        //Title Charge multip
        txtAreaInputPreview.append("\n"+txtTitle.getText()+"\n\n");
        txtAreaInputPreview.append(txtCharge.getText()+" "+txtMultiplicity.getText()+'\n');

        //print xyz coordinate
        if (!txtXYZFilePath.getText().equals("")) {
            if (!chkCopycheckpoint.isSelected()) {
                xyz_printer(txtXYZFilePath.getText());
            }
        }

        //scan input
        if (comboboxCalcType.getSelectedItem().equals("Scan")) {
            txtAreaInputPreview.append("\n"+txtScanParam.getText()+"\n");
        }

        //print basis set ecp
        if (!txtXYZFilePath.getText().equals("")) {
            ArrayList<String> atoms_main = (atoms_classified.get(0));
            ArrayList<String> atoms_ecp = (atoms_classified.get(1));

            txtAreaInputPreview.append("\n");

            // print main basis set
            if (atoms_main.size() > 0) {
                for (String atom : atoms_main) {
                    txtAreaInputPreview.append(atom + " ");
                }
                txtAreaInputPreview.append("0\n");
                txtAreaInputPreview.append(txtBasisMain.getText() + "\n");
                txtAreaInputPreview.append("****\n");
            }
            // print sub basis set & ecp
            if (atoms_ecp.size() > 0) {
                for (String atom : atoms_ecp) {
                    txtAreaInputPreview.append(atom + " ");
                }
                txtAreaInputPreview.append("0\n");
                txtAreaInputPreview.append(txtBasisSub.getText() + "\n");
                txtAreaInputPreview.append("****\n\n");
                
                for (String atom : atoms_ecp) {
                    txtAreaInputPreview.append(atom + " ");
                }
                txtAreaInputPreview.append("0\n");
                txtAreaInputPreview.append(txtBasisSub.getText() + "\n");
            }
            txtAreaInputPreview.append("\n");
        }
        
        //Solvation additional input
        if (comboboxCalcType.getSelectedItem().equals("SP Solv")) {
            if (txtSolvent.getText().matches("[-+]?[0-9]*\\.?[0-9]+")) {
                txtAreaInputPreview.append("eps=" + txtSolvent.getText() + "\n");
            }
            txtAreaInputPreview.append("\n");
        }

        //Set save path
        if(chkCurrentFolder.isSelected()){
            if(!txtXYZFilePath.getText().isEmpty()){
                File file = new File(txtXYZFilePath.getText());
                String parent_path = file.getParent();
                String file_name = file.getName();
                txtSavePath.setText(parent_path+"\\"+txtTitle.getText()+".dat");
            } else if (!txtChkFilePath.getText().isEmpty()){
                File file = new File(txtChkFilePath.getText());
                String parent_path = file.getParent();
                String file_name = file.getName();
                txtSavePath.setText(parent_path+"\\"+txtTitle.getText()+".dat");                
            }
        } else {
            if(!txtXYZFilePath.getText().isEmpty()){
                File file = new File(txtXYZFilePath.getText());
                String parent_path = file.getParent();
                File file_parent = new File(parent_path);
                String project_path = file_parent.getParent();
                txtSavePath.setText(project_path+"\\"+txtTitle.getText()+"\\"+txtTitle.getText()+".dat");
            } else if (!txtChkFilePath.getText().isEmpty()){
                File file = new File(txtChkFilePath.getText());
                String parent_path = file.getParent();
                File file_parent = new File(parent_path);
                String project_path = file_parent.getParent();
                txtSavePath.setText(project_path+"\\"+txtTitle.getText()+"\\"+txtTitle.getText()+".dat");             
            }            
        }
    }

    public static void xyz_printer(String txtPath) {
        try {
            BufferedReader bf_txt = new BufferedReader(new FileReader(txtPath));
            String Line = bf_txt.readLine();
            while (!(Line == null)) {
                if (Line.split("\\s+").length == 4) {
                    txtAreaInputPreview.append(Line+"\n");
                }
                Line = bf_txt.readLine();
            }
            bf_txt.close();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        //JOptionPane.showMessageDialog(null, "Done!");
    }
    public static ArrayList<String> get_atoms(String txtPath) {
        try {
            ArrayList<String> atoms = new ArrayList<String>();
            BufferedReader bf_txt = new BufferedReader(new FileReader(txtPath));
            String Line = bf_txt.readLine();
            while (!(Line == null)) {
                if (Line.split("\\s+").length == 4) {
                    String atom_tmp = Line.split("\\s+")[0];
                    if(!atoms.contains(atom_tmp)){
                        atoms.add(atom_tmp);
                    }
                }
                Line = bf_txt.readLine();
            }
            bf_txt.close();
            
            return atoms;
        } catch (Exception e) {
            e.printStackTrace();
        }
        //JOptionPane.showMessageDialog(null, "Done!");
        return null;
    }    
    
    public static ArrayList<ArrayList<String>> classify_atoms(ArrayList<String> atoms) throws IOException {
        HashMap<String, Integer> periodictable = new HashMap<String, Integer>();
        periodictable.put("H", 1);
        periodictable.put("He", 2);
        periodictable.put("Li", 3);
        periodictable.put("Be", 4);
        periodictable.put("B", 5);
        periodictable.put("C", 6);
        periodictable.put("N", 7);
        periodictable.put("O", 8);
        periodictable.put("F", 9);
        periodictable.put("Ne", 10);
        periodictable.put("Na", 11);
        periodictable.put("Mg", 12);
        periodictable.put("Al", 13);
        periodictable.put("Si", 14);
        periodictable.put("P", 15);
        periodictable.put("S", 16);
        periodictable.put("Cl", 17);
        periodictable.put("Ar", 18);
        periodictable.put("K", 19);
        periodictable.put("Ca", 20);
        periodictable.put("Sc", 21);
        periodictable.put("Ti", 22);
        periodictable.put("V", 23);
        periodictable.put("Cr", 24);
        periodictable.put("Mn", 25);
        periodictable.put("Fe", 26);
        periodictable.put("Co", 27);
        periodictable.put("Ni", 28);
        periodictable.put("Cu", 29);
        periodictable.put("Zn", 30);
        periodictable.put("Ga", 31);
        periodictable.put("Ge", 32);
        periodictable.put("As", 33);
        periodictable.put("Se", 34);
        periodictable.put("Br", 35);
        periodictable.put("Kr", 36);
        periodictable.put("Rb", 37);
        periodictable.put("Sr", 38);
        periodictable.put("Y", 39);
        periodictable.put("Zr", 40);
        periodictable.put("Nb", 41);
        periodictable.put("Mo", 42);
        periodictable.put("Tc", 43);
        periodictable.put("Ru", 44);
        periodictable.put("Rh", 45);
        periodictable.put("Pd", 46);
        periodictable.put("Ag", 47);
        periodictable.put("Cd", 48);
        periodictable.put("In", 49);
        periodictable.put("Sn", 50);
        periodictable.put("Sb", 51);
        periodictable.put("Te", 52);
        periodictable.put("I", 53);
        periodictable.put("Xe", 54);
        periodictable.put("Cs", 55);
        periodictable.put("Ba", 56);
        periodictable.put("La", 57);
        periodictable.put("Ce", 58);
        periodictable.put("Pr", 59);
        periodictable.put("Nd", 60);
        periodictable.put("Pm", 61);
        periodictable.put("Sm", 62);
        periodictable.put("Eu", 63);
        periodictable.put("Gd", 64);
        periodictable.put("Tb", 65);
        periodictable.put("Dy", 66);
        periodictable.put("Ho", 67);
        periodictable.put("Er", 68);
        periodictable.put("Tm", 69);
        periodictable.put("Yb", 70);
        periodictable.put("Lu", 71);
        periodictable.put("Hf", 72);
        periodictable.put("Ta", 73);
        periodictable.put("W", 74);
        periodictable.put("Re", 75);
        periodictable.put("Os", 76);
        periodictable.put("Ir", 77);
        periodictable.put("Pt", 78);
        periodictable.put("Au", 79);
        periodictable.put("Hg", 80);
        periodictable.put("Tl", 81);
        periodictable.put("Pb", 82);
        periodictable.put("Bi", 83);
        periodictable.put("Po", 84);
        periodictable.put("At", 85);
        periodictable.put("Rn", 86);
        periodictable.put("Fr", 87);
        periodictable.put("Ra", 88);
        periodictable.put("Ac", 89);
        periodictable.put("Th", 90);
        periodictable.put("Pa", 91);
        periodictable.put("U", 92);
        periodictable.put("Np", 93);
        periodictable.put("Pu", 94);
        periodictable.put("Am", 95);
        periodictable.put("Cm", 96);
        periodictable.put("Bk", 97);
        periodictable.put("Cf", 98);
        periodictable.put("Es", 99);
        periodictable.put("Fm", 100);
        periodictable.put("Md", 101);
        periodictable.put("No", 102);
        periodictable.put("Lr", 103);
        periodictable.put("Rf", 104);
        periodictable.put("Db", 105);
        periodictable.put("Sg", 106);
        periodictable.put("Bh", 107);
        periodictable.put("Hs", 108);
        periodictable.put("Mt", 109);
        periodictable.put("Ds", 110);
        periodictable.put("Rg", 111);
        periodictable.put("Cn", 112);
        periodictable.put("Uut", 113);
        periodictable.put("Fl", 114);
        periodictable.put("Uup", 115);
        periodictable.put("Lv", 116);
        periodictable.put("Uus", 117);
        periodictable.put("Uuo", 118);

        ArrayList<ArrayList<String>> atoms_classified = new ArrayList<ArrayList<String>>();
        ArrayList<String> atoms_main = new ArrayList<>();
        ArrayList<String> atoms_ecp = new ArrayList<>();

        for (String atom : atoms) {
            int num = periodictable.get(atom);
            if (num > 20) {
                atoms_ecp.add(atom);
            } else {
                atoms_main.add(atom);
            }
        }
        atoms_classified.add(atoms_main);
        atoms_classified.add(atoms_ecp);
        return atoms_classified;
    }    

    private void save_input(File input_file) throws IOException {
        BufferedWriter bw = new BufferedWriter(new FileWriter(input_file));
        PrintWriter pw = new PrintWriter(bw);
        pw.println(txtAreaInputPreview.getText());
        pw.close();
        bw.close();

        if (chkCopycheckpoint.isSelected()) {
            if (!txtChkFilePath.getText().equals("")) {
                String new_chk_path = input_file.getParent() + "\\" + input_file.getName().split("\\.")[0] + ".chk";
                FileInputStream inputStream = new FileInputStream(txtChkFilePath.getText());
                FileOutputStream outputStream = new FileOutputStream(new_chk_path);

                FileChannel fcin = inputStream.getChannel();
                FileChannel fcout = outputStream.getChannel();

                long size = fcin.size();
                fcin.transferTo(0, size, fcout);

                fcout.close();
                fcin.close();

                outputStream.close();
                inputStream.close();
            }
        }

        JOptionPane.showMessageDialog(null, "Saved.");
    }
}
